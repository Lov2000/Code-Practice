Chef has an array A consisting of N elements. He wants to find number of pairs of non-intersecting segments [a, b] and [c, d] (1 ≤ a ≤ b < c ≤ d ≤ N) such there is no number that occurs in the subarray {Aa, Aa+1, ... , Ab} and {Ac, Ac+1, ... , Ad} simultaneously.

Help Chef to find this number.

Input
The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.
The first line of each test case contains a single integer N denoting the number of elements in the array.
The second line contains N space-separated integers A1, A2, ..., AN.
Output
For each test case, output a single line containing one integer - number of pairs of non-intersecting segments.
Constraints
1 ≤ T ≤ 5
1 ≤ N ≤ 1000
1 ≤ Ai ≤ 109
Subtasks
Subtask 1 (7 points)
1 ≤ N ≤ 20
Subtask 2 (34 points)

1 ≤ N ≤ 300
Subtask 3 (59 points)

Original constraints
Sample 1:
Input
Output
2
3
1 2 3
4
1 2 1 2
5
4
Explanation:
Example case 1. All possible variants are correct: {[1, 1], [2, 2]}, {[1, 1], [2, 3]}, {[1, 2], [3, 3]}, {[2, 2], [3, 3]}, {[1,1], [3, 3]}.

Example case 2. Correct segments: {[1, 1], [2, 2]}, {[1, 1], [4, 4]}, {[2, 2], [3, 3]}, {[3, 3], [4, 4]}.

 
 code-------
 
 #include <bits/stdc++.h>
#define F first
#define S second
#define pb push_back
#define mp make_pair

using namespace std;
typedef long long ll;
typedef pair <ll, ll> pii;

const int INF = 1e7;
const ll llINF = 1e17;
const int mxN = 1e3 + 9;
const int mxM = 1e5 + 9;
const int MOD = 1e9 + 7;
const double pi = acos (-1);

int pa[mxN], sz[mxN];
long long res;

int getPa (int x) {
    while (pa[x] != x)
        x = pa[x];
    
    return x;
}

long long nCr (int x) {
    return 1ll * x * (x + 1) / 2;
}

void merge (int x, int y) {
    x = getPa (x), y = getPa (y);
    if (x == y)
        return;
    
    if (sz[x] > sz[y])
        swap (x, y);
    
    res -= nCr (sz[x]) + nCr (sz[y]);
    res += nCr (sz[x] + sz[y]);
    
    sz[y] += sz[x];
    pa[x] = pa[y];
    return;
}

int getId (int x, vector <int>& comp) {
    return upper_bound (comp.begin(), comp.end(), x) - comp.begin();
}

void goCompress (vector <int>& A) {
    int n = A.size() - 1;
    vector <int> v;
    
    for (int i = 1; i <= n; i++)
        v.pb (A[i]);
        
    sort (v.begin(), v.end());
    vector <int> comp;
    
    for (auto u: v) {
        if (comp.size() == 0) {
            comp.pb (u);
        } else {
            if (comp.back() != u)
                comp.pb (u);
        }
    }
    
    for (int i = 1; i <= n; i++) {
        A[i] = getId (A[i], comp);
    }
    
    return;
}

void solve () {
    int n;
    cin >> n;
    
    vector <int> A (n + 1, 0);
    
    for (int i = 1; i <= n; i++) 
        cin >> A[i];
    
    vector <int> freq (n + 1, 0);
    vector <int> idx[n + 1];
    
    goCompress (A);
    for (int i = 1; i <= n; i++) 
        idx[A[i]].pb (i);
    
    long long ans = 0;
    for (int l = 2; l <= n; l++) {
        
        for (int i = l; i <= n; i++)
            freq[A[i]]++;
            
        for (int i = 1; i < l; i++) {
            if (freq[A[i]])
                continue;
            
            pa[i] = i;
            sz[i] = 1;
            res++;
            
            if (i - 1 > 0 && pa[i - 1] != 0)
                merge (i, i - 1);
        }
            
        for (int r = n; r >= l; r--) {
            ans += res;
            
            freq[A[r]]--;
            if (freq[A[r]])
                continue;
                
            for (auto u: idx[A[r]]) {
                if (u >= l)
                    break;
                    
                pa[u] = u;
                sz[u] = 1;
                res++;
                
                if (u - 1 >= 1 && pa[u - 1] != 0)
                    merge (u, u - 1);
                    
                if (u + 1 <= n && pa[u + 1] != 0)
                    merge (u, u + 1);
            }
        }
        
        res = 0;
        for (int i = 1; i < l; i++)
            sz[i] = pa[i] = 0;
    }
    
    res = 0;
    for (int i = 0; i <= n; i++)
        sz[i] = pa[i] = 0;
    
    cout << ans << "\n";
    return;
}

int main () {
    int t = 1;
    cin >> t;
    
    //ios_base::sync_with_stdio (0);
    //cin.tie (0);
	
    //setIO ("billboard");
    //preCalc ();
    while (t--) {
        //initialize common variables
		
        
		//go solve
        solve ();
    }
    
    return 0;
}

